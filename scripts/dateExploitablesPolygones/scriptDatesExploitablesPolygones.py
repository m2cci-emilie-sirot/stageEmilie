#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Aug 12 17:12:53 2021

@author: Emilie SIROT
"""

import os
from osgeo import gdal
import itertools
import rasterio
from rasterstats import zonal_stats, point_query
import numpy as np 
import geopandas as gpd
import pandas as pd


####################
####################
### Tuile 31TFJ ####
####################
####################
 
 
repDonnees = r"../applicationMasque/sortie/sortieT31TFJ"
repSortie = "sortie/sortieT31TFJ"

listeRep = os.listdir(repDonnees)


#ouvrir les TFE

TFEChemin = "TFE/polygones_T31TFJ.shp"    
TFE = gpd.read_file(TFEChemin) #ouverture du shp
   
  

legende = ["dates"]

for leg in range(len(TFE)):
    legende.append(TFE["typo_AS"][leg])


tabCalcul = pd.DataFrame(columns = legende)


index = 0

for i in range (len(listeRep)):
    repCourant = os.path.join(repDonnees, listeRep[i])#se positionner dans le répertoire d'une date
    
    nomParties = os.path.basename(listeRep[i]).split("_")
  
    tuile = nomParties[2]
    date = nomParties[1]
    date = int(date)
    
    nomSortieTab = f"tableau_pourcentage_dates_exploitables_{tuile}.csv"
    
    
    masque = os.path.join(repCourant,"masqueConverti.tiff")
   

    stats = zonal_stats(TFE, masque, stats = 'mean')

    val = []
    
    for stat in range(len(stats)):
        val.append(stats[stat].get('mean'))
                    

           
            
    val.insert(0,date)
        
    tabCalcul.loc[index]=val
    
    index = index + 1
    


listePourcentage = []

for colTab in range(1,len(tabCalcul.columns)):
    colListe = tabCalcul.iloc[:,colTab].tolist()
    lg = len(colListe)    
    nb = colListe.count(1)
    pourcentage = (nb*100)/lg
    listePourcentage.append(pourcentage)


legende2 = []
for leg in range(len(TFE)):
    legende2.append(TFE["typo_AS"][leg])

tabPourcentage = pd.DataFrame(columns = legende2)

tabPourcentage.loc[0] = listePourcentage
tabPourcentage.to_csv(os.path.join(repSortie,nomSortieTab), index=False)

####################
####################
### Tuile 31TFK ####
####################
####################
 
 
repDonnees = r"../applicationMasque/sortie/sortieT31TFK"
repSortie = "sortie/sortieT31TFK"

listeRep = os.listdir(repDonnees)


#ouvrir les TFE

TFEChemin = "TFE/polygones_T31TFK.shp"    
TFE = gpd.read_file(TFEChemin) #ouverture du shp
   
  

legende = ["dates"]

for leg in range(len(TFE)):
    legende.append(TFE["typo_AS"][leg])


tabCalcul = pd.DataFrame(columns = legende)


index = 0

for i in range (len(listeRep)):
    repCourant = os.path.join(repDonnees, listeRep[i])#se positionner dans le répertoire d'une date
    
    nomParties = os.path.basename(listeRep[i]).split("_")
  
    tuile = nomParties[2]
    date = nomParties[1]
    date = int(date)
    
    nomSortieTab = f"tableau_pourcentage_dates_exploitables_{tuile}.csv"
    
    
    masque = os.path.join(repCourant,"masqueConverti.tiff")
   

    stats = zonal_stats(TFE, masque, stats = 'mean')

    val = []
    
    for stat in range(len(stats)):
        val.append(stats[stat].get('mean'))
                    

           
            
    val.insert(0,date)
        
    tabCalcul.loc[index]=val
    
    index = index + 1
    


listePourcentage = []

for colTab in range(1,len(tabCalcul.columns)):
    colListe = tabCalcul.iloc[:,colTab].tolist()
    lg = len(colListe)    
    nb = colListe.count(1)
    pourcentage = (nb*100)/lg
    listePourcentage.append(pourcentage)


legende2 = []
for leg in range(len(TFE)):
    legende2.append(TFE["typo_AS"][leg])

tabPourcentage = pd.DataFrame(columns = legende2)

tabPourcentage.loc[0] = listePourcentage
tabPourcentage.to_csv(os.path.join(repSortie,nomSortieTab), index=False)


####################
####################
### Tuile 31TGK ####
####################
####################
 
 
repDonnees = r"../applicationMasque/sortie/sortieT31TGK"
repSortie = "sortie/sortieT31TGK"

listeRep = os.listdir(repDonnees)


#ouvrir les TFE

TFEChemin = "TFE/polygones_T31TGK.shp"    
TFE = gpd.read_file(TFEChemin) #ouverture du shp
   
  

legende = ["dates"]

for leg in range(len(TFE)):
    legende.append(TFE["typo_AS"][leg])


tabCalcul = pd.DataFrame(columns = legende)


index = 0

for i in range (len(listeRep)):
    repCourant = os.path.join(repDonnees, listeRep[i])#se positionner dans le répertoire d'une date
    
    nomParties = os.path.basename(listeRep[i]).split("_")
  
    tuile = nomParties[2]
    date = nomParties[1]
    date = int(date)
    
    nomSortieTab = f"tableau_pourcentage_dates_exploitables_{tuile}.csv"
    
    
    masque = os.path.join(repCourant,"masqueConverti.tiff")
   

    stats = zonal_stats(TFE, masque, stats = 'mean')

    val = []
    
    for stat in range(len(stats)):
        val.append(stats[stat].get('mean'))
                    

           
            
    val.insert(0,date)
        
    tabCalcul.loc[index]=val
    
    index = index + 1
    


listePourcentage = []

for colTab in range(1,len(tabCalcul.columns)):
    colListe = tabCalcul.iloc[:,colTab].tolist()
    lg = len(colListe)    
    nb = colListe.count(1)
    pourcentage = (nb*100)/lg
    listePourcentage.append(pourcentage)


legende2 = []
for leg in range(len(TFE)):
    legende2.append(TFE["typo_AS"][leg])

tabPourcentage = pd.DataFrame(columns = legende2)

tabPourcentage.loc[0] = listePourcentage
tabPourcentage.to_csv(os.path.join(repSortie,nomSortieTab), index=False)

####################
####################
### Tuile 31TGL ####
####################
####################
 
 
repDonnees = r"../applicationMasque/sortie/sortieT31TGL"
repSortie = "sortie/sortieT31TGL"

listeRep = os.listdir(repDonnees)


#ouvrir les TFE

TFEChemin = "TFE/polygones_T31TGL.shp"    
TFE = gpd.read_file(TFEChemin) #ouverture du shp
   
  

legende = ["dates"]

for leg in range(len(TFE)):
    legende.append(TFE["typo_AS"][leg])


tabCalcul = pd.DataFrame(columns = legende)


index = 0

for i in range (len(listeRep)):
    repCourant = os.path.join(repDonnees, listeRep[i])#se positionner dans le répertoire d'une date
    
    nomParties = os.path.basename(listeRep[i]).split("_")
  
    tuile = nomParties[2]
    date = nomParties[1]
    date = int(date)
    
    nomSortieTab = f"tableau_pourcentage_dates_exploitables_{tuile}.csv"
    
    
    masque = os.path.join(repCourant,"masqueConverti.tiff")
   

    stats = zonal_stats(TFE, masque, stats = 'mean')

    val = []
    
    for stat in range(len(stats)):
        val.append(stats[stat].get('mean'))
                    

           
            
    val.insert(0,date)
        
    tabCalcul.loc[index]=val
    
    index = index + 1
    


listePourcentage = []

for colTab in range(1,len(tabCalcul.columns)):
    colListe = tabCalcul.iloc[:,colTab].tolist()
    lg = len(colListe)    
    nb = colListe.count(1)
    pourcentage = (nb*100)/lg
    listePourcentage.append(pourcentage)


legende2 = []
for leg in range(len(TFE)):
    legende2.append(TFE["typo_AS"][leg])

tabPourcentage = pd.DataFrame(columns = legende2)

tabPourcentage.loc[0] = listePourcentage
tabPourcentage.to_csv(os.path.join(repSortie,nomSortieTab), index=False)


####################
####################
### Tuile 32TLP ####
####################
####################
 
 
repDonnees = r"../applicationMasque/sortie/sortieT32TLP"
repSortie = "sortie/sortieT32TLP"

listeRep = os.listdir(repDonnees)


#ouvrir les TFE

TFEChemin = "TFE/polygones_T32TLP.shp"    
TFE = gpd.read_file(TFEChemin) #ouverture du shp
   
  

legende = ["dates"]

for leg in range(len(TFE)):
    legende.append(TFE["typo_AS"][leg])


tabCalcul = pd.DataFrame(columns = legende)


index = 0

for i in range (len(listeRep)):
    repCourant = os.path.join(repDonnees, listeRep[i])#se positionner dans le répertoire d'une date
    
    nomParties = os.path.basename(listeRep[i]).split("_")
  
    tuile = nomParties[2]
    date = nomParties[1]
    date = int(date)
    
    nomSortieTab = f"tableau_pourcentage_dates_exploitables_{tuile}.csv"
    
    
    masque = os.path.join(repCourant,"masqueConverti.tiff")
   

    stats = zonal_stats(TFE, masque, stats = 'mean')

    val = []
    
    for stat in range(len(stats)):
        val.append(stats[stat].get('mean'))
                    

           
            
    val.insert(0,date)
        
    tabCalcul.loc[index]=val
    
    index = index + 1
    


listePourcentage = []

for colTab in range(1,len(tabCalcul.columns)):
    colListe = tabCalcul.iloc[:,colTab].tolist()
    lg = len(colListe)    
    nb = colListe.count(1)
    pourcentage = (nb*100)/lg
    listePourcentage.append(pourcentage)


legende2 = []
for leg in range(len(TFE)):
    legende2.append(TFE["typo_AS"][leg])

tabPourcentage = pd.DataFrame(columns = legende2)

tabPourcentage.loc[0] = listePourcentage
tabPourcentage.to_csv(os.path.join(repSortie,nomSortieTab), index=False)


####################
####################
### Tuile 32TLQ ####
####################
####################
 
 
repDonnees = r"../applicationMasque/sortie/sortieT32TLQ"
repSortie = "sortie/sortieT32TLQ"

listeRep = os.listdir(repDonnees)


#ouvrir les TFE

TFEChemin = "TFE/polygones_T32TLQ.shp"    
TFE = gpd.read_file(TFEChemin) #ouverture du shp
   
  

legende = ["dates"]

for leg in range(len(TFE)):
    legende.append(TFE["typo_AS"][leg])


tabCalcul = pd.DataFrame(columns = legende)


index = 0

for i in range (len(listeRep)):
    repCourant = os.path.join(repDonnees, listeRep[i])#se positionner dans le répertoire d'une date
    
    nomParties = os.path.basename(listeRep[i]).split("_")
  
    tuile = nomParties[2]
    date = nomParties[1]
    date = int(date)
    
    nomSortieTab = f"tableau_pourcentage_dates_exploitables_{tuile}.csv"
    
    
    masque = os.path.join(repCourant,"masqueConverti.tiff")
   

    stats = zonal_stats(TFE, masque, stats = 'mean')

    val = []
    
    for stat in range(len(stats)):
        val.append(stats[stat].get('mean'))
                    

           
            
    val.insert(0,date)
        
    tabCalcul.loc[index]=val
    
    index = index + 1
    


listePourcentage = []

for colTab in range(1,len(tabCalcul.columns)):
    colListe = tabCalcul.iloc[:,colTab].tolist()
    lg = len(colListe)    
    nb = colListe.count(1)
    pourcentage = (nb*100)/lg
    listePourcentage.append(pourcentage)


legende2 = []
for leg in range(len(TFE)):
    legende2.append(TFE["typo_AS"][leg])

tabPourcentage = pd.DataFrame(columns = legende2)

tabPourcentage.loc[0] = listePourcentage
tabPourcentage.to_csv(os.path.join(repSortie,nomSortieTab), index=False)


####################
####################
### Tuile 32TLR ####
####################
####################
 
 
repDonnees = r"../applicationMasque/sortie/sortieT32TLR"
repSortie = "sortie/sortieT32TLR"

listeRep = os.listdir(repDonnees)


#ouvrir les TFE

TFEChemin = "TFE/polygones_T32TLR.shp"    
TFE = gpd.read_file(TFEChemin) #ouverture du shp
   

legende = ["dates"]

for leg in range(len(TFE)):
    legende.append(TFE["typo_AS"][leg])


tabCalcul = pd.DataFrame(columns = legende)


index = 0

for i in range (len(listeRep)):
    repCourant = os.path.join(repDonnees, listeRep[i])#se positionner dans le répertoire d'une date
    
    nomParties = os.path.basename(listeRep[i]).split("_")
  
    tuile = nomParties[2]
    date = nomParties[1]
    date = int(date)
    
    nomSortieTab = f"tableau_pourcentage_dates_exploitables_{tuile}.csv"
    
    
    masque = os.path.join(repCourant,"masqueConverti.tiff")
   

    stats = zonal_stats(TFE, masque, stats = 'mean')

    val = []
    
    for stat in range(len(stats)):
        val.append(stats[stat].get('mean'))
                    

           
            
    val.insert(0,date)
        
    tabCalcul.loc[index]=val
    
    index = index + 1
    


listePourcentage = []

for colTab in range(1,len(tabCalcul.columns)):
    colListe = tabCalcul.iloc[:,colTab].tolist()
    lg = len(colListe)    
    nb = colListe.count(1)
    pourcentage = (nb*100)/lg
    listePourcentage.append(pourcentage)


legende2 = []
for leg in range(len(TFE)):
    legende2.append(TFE["typo_AS"][leg])

tabPourcentage = pd.DataFrame(columns = legende2)

tabPourcentage.loc[0] = listePourcentage
tabPourcentage.to_csv(os.path.join(repSortie,nomSortieTab), index=False)
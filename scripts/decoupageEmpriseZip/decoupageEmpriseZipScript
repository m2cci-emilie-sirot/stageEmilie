#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Apr 23 15:36:50 2021

@author: Emilie Sirot d'après le script de Pascal Pichelin
"""

#packages à importer

import os
from pprint import pprint
from zipfile import ZipFile
from osgeo import gdal



####################
####################
### Tuile 31TFJ ####
####################
####################

repDonnees = "archive_zip/T31TFJ" #repertoire qui contient les dossiers .zip Sentinel2
repSortie = "sortie/sortieT31TFJ" #repertoire pour la sortie des fichiers
emprise = "emprise/emp31TFJ.gpkg"
listeRep = os.listdir(repDonnees)

#boucle de l'extraction des emprises pour toutes les dates de la tuile
for i in range(len(listeRep)):
    
    #definir le sous-repertoire en cours
    repCourant = os.path.join(repDonnees, listeRep[i])
    
    #accès aux fichiers du sous-repertoire
    repDonneesSousRep = ZipFile(repCourant, 'r')
    pprint(repDonneesSousRep.filelist)
    
    #creation d'une liste de ces fichiers
    repDonneesFichiers = repDonneesSousRep.namelist()

# # Selection des images à traiter

    # Selection des images à garder
    images = [f for f in repDonneesFichiers if 'FRE' in f]
    #masqueSnow = [f for f in repDonneesFichiers if ('EXS'in f or 'SNW' in f) and '.tif' in f]
    masque = [f for f in repDonneesFichiers if 'CLM' in f and 'R1' in f ]
    
# # Dossier et fichiers de sortie
 
    #definir le nom des repertoires en sortie
    nomParties = os.path.basename(repCourant).split("_")
    sat = nomParties[0].replace("SENTINEL", "S")
    date = nomParties[1].split("-")[0]
    
    
    rep = f"{sat}_{date}_{nomParties[3]}"
   
    os.makedirs(os.path.join(repSortie,sat+"_"+date), exist_ok=True) # creation du dossier sur le disque


# # Traitement de l'image compressee
# gdal lit directement des donnees dans des archives.  
# Pour des repDonneess au format zip on utilise le protocol vsizip.  
# Pour lire des donnees on donne le chemin de l'repDonnees (comme si c'etait un dossier) puis le chemin de l'image dans l'repDonnees.
  
    for img in images:
               
        imageParties = img.split("_")
        bande = imageParties[12].split(".")[0]
        nomExtrait = f"{rep}_{bande}"
        fichierExtrait = os.path.join(repSortie,sat+"_"+date,nomExtrait) # nom + chemin de l'image
        sortieTif = gdal.Warp(fichierExtrait,
                            f"/vsizip/{repCourant}/{img}", # vsizip + chemin du zip + chemin de l'image dans le zip
                            creationOptions=['COMPRESS=LZW', 'PREDICTOR=2'], # compression du tif
                            cutlineDSName=emprise, # decoupage en fonction d'un contour
                            dstNodata=-10000, # valeur de nodata -10000
                            xRes=10, yRes=-10, # resolution de sortie
                            targetAlignedPixels=True, # on garde le même emplacement des pixels que l'image de depart
                            cropToCutline=True) # on reduit l'image à l"emprise du contour
                             
                                 
        if not sortieTif:
            print(f"Erreur : {fichierExtrait}")
            sortieTif = None
    

    for img in masque:
           
        masque_parts = img.split("_")
        masque_name = masque_parts[11]+"_"+masque_parts[12].split(".")[0]
        nomExtrait = f"{rep}_{masque_name}"
        fichierExtrait = os.path.join(repSortie,sat+"_"+date, nomExtrait) # nom + chemin de l'image
        sortieTif = gdal.Warp(fichierExtrait,
                            f"/vsizip/{repCourant}/{img}", # vsizip + chemin du zip + chemin de l'image dans le zip
                            creationOptions=['COMPRESS=LZW', 'PREDICTOR=2'], # compression du tif
                            cutlineDSName=emprise, # decoupage en fonction d'un contour
                            dstNodata=-10000, # valeur de nodata
                            xRes=10, yRes=-10, # resolution de sortie
                            targetAlignedPixels=True, # on garde le même emplacement des pixels que l'image de depart
                            cropToCutline=True # on reduit l'image à l"emprise du contour
                            )
    if not sortieTif:
        print(f"Erreur : {fichierExtrait}")
        sortieTif = None

####################
####################
### Tuile 31TFK ####
####################
####################

repDonnees = "archive_zip/T31TFK" #repertoire qui contient les dossiers .zip Sentinel2
repSortie = "sortie/sortieT31TFK" #repertoire pour la sortie des fichiers
emprise = "emprise/emp31TFK.gpkg"
listeRep = os.listdir(repDonnees)

#boucle de l'extraction des emprises pour toutes les dates de la tuile
for i in range(len(listeRep)):
    
    #definir le sous-repertoire en cours
    repCourant = os.path.join(repDonnees, listeRep[i])
    
    #accès aux fichiers du sous-repertoire
    repDonneesSousRep = ZipFile(repCourant, 'r')
    pprint(repDonneesSousRep.filelist)
    
    #creation d'une liste de ces fichiers
    repDonneesFichiers = repDonneesSousRep.namelist()

# # Selection des images à traiter

    # Selection des images à garder
    images = [f for f in repDonneesFichiers if 'FRE' in f]
    #masqueSnow = [f for f in repDonneesFichiers if ('EXS'in f or 'SNW' in f) and '.tif' in f]
    masque = [f for f in repDonneesFichiers if 'CLM' in f and 'R1' in f ]
    
# # Dossier et fichiers de sortie
 
    #definir le nom des repertoires en sortie
    nomParties = os.path.basename(repCourant).split("_")
    sat = nomParties[0].replace("SENTINEL", "S")
    date = nomParties[1].split("-")[0]
    
    
    rep = f"{sat}_{date}_{nomParties[3]}"
   
    os.makedirs(os.path.join(repSortie,sat+"_"+date), exist_ok=True) # creation du dossier sur le disque


# # Traitement de l'image compressee
# gdal lit directement des donnees dans des archives.  
# Pour des repDonneess au format zip on utilise le protocol vsizip.  
# Pour lire des donnees on donne le chemin de l'repDonnees (comme si c'etait un dossier) puis le chemin de l'image dans l'repDonnees.
  
    for img in images:
               
        imageParties = img.split("_")
        bande = imageParties[12].split(".")[0]
        nomExtrait = f"{rep}_{bande}"
        fichierExtrait = os.path.join(repSortie,sat+"_"+date,nomExtrait) # nom + chemin de l'image
        sortieTif = gdal.Warp(fichierExtrait,
                            f"/vsizip/{repCourant}/{img}", # vsizip + chemin du zip + chemin de l'image dans le zip
                            creationOptions=['COMPRESS=LZW', 'PREDICTOR=2'], # compression du tif
                            cutlineDSName=emprise, # decoupage en fonction d'un contour
                            dstNodata=-10000, # valeur de nodata -10000
                            xRes=10, yRes=-10, # resolution de sortie
                            targetAlignedPixels=True, # on garde le même emplacement des pixels que l'image de depart
                            cropToCutline=True) # on reduit l'image à l"emprise du contour
                             
                                 
        if not sortieTif:
            print(f"Erreur : {fichierExtrait}")
            sortieTif = None
    

    for img in masque:
           
        masque_parts = img.split("_")
        masque_name = masque_parts[11]+"_"+masque_parts[12].split(".")[0]
        nomExtrait = f"{rep}_{masque_name}"
        fichierExtrait = os.path.join(repSortie,sat+"_"+date, nomExtrait) # nom + chemin de l'image
        sortieTif = gdal.Warp(fichierExtrait,
                            f"/vsizip/{repCourant}/{img}", # vsizip + chemin du zip + chemin de l'image dans le zip
                            creationOptions=['COMPRESS=LZW', 'PREDICTOR=2'], # compression du tif
                            cutlineDSName=emprise, # decoupage en fonction d'un contour
                            dstNodata=-10000, # valeur de nodata
                            xRes=10, yRes=-10, # resolution de sortie
                            targetAlignedPixels=True, # on garde le même emplacement des pixels que l'image de depart
                            cropToCutline=True # on reduit l'image à l"emprise du contour
                            )
    if not sortieTif:
        print(f"Erreur : {fichierExtrait}")
        sortieTif = None


####################
####################
### Tuile 31TGK ####
####################
####################

repDonnees = "archive_zip/T31TGK" #repertoire qui contient les dossiers .zip Sentinel2
repSortie = "sortie/sortieT31TGK" #repertoire pour la sortie des fichiers
emprise = "emprise/emp31TGK.gpkg"
listeRep = os.listdir(repDonnees)

#boucle de l'extraction des emprises pour toutes les dates de la tuile
for i in range(len(listeRep)):
    
    #definir le sous-repertoire en cours
    repCourant = os.path.join(repDonnees, listeRep[i])
    
    #accès aux fichiers du sous-repertoire
    repDonneesSousRep = ZipFile(repCourant, 'r')
    pprint(repDonneesSousRep.filelist)
    
    #creation d'une liste de ces fichiers
    repDonneesFichiers = repDonneesSousRep.namelist()

# # Selection des images à traiter

    # Selection des images à garder
    images = [f for f in repDonneesFichiers if 'FRE' in f]
    #masqueSnow = [f for f in repDonneesFichiers if ('EXS'in f or 'SNW' in f) and '.tif' in f]
    masque = [f for f in repDonneesFichiers if 'CLM' in f and 'R1' in f ]
    
# # Dossier et fichiers de sortie
 
    #definir le nom des repertoires en sortie
    nomParties = os.path.basename(repCourant).split("_")
    sat = nomParties[0].replace("SENTINEL", "S")
    date = nomParties[1].split("-")[0]
    
    
    rep = f"{sat}_{date}_{nomParties[3]}"
   
    os.makedirs(os.path.join(repSortie,sat+"_"+date), exist_ok=True) # creation du dossier sur le disque


# # Traitement de l'image compressee
# gdal lit directement des donnees dans des archives.  
# Pour des repDonneess au format zip on utilise le protocol vsizip.  
# Pour lire des donnees on donne le chemin de l'repDonnees (comme si c'etait un dossier) puis le chemin de l'image dans l'repDonnees.
  
    for img in images:
               
        imageParties = img.split("_")
        bande = imageParties[12].split(".")[0]
        nomExtrait = f"{rep}_{bande}"
        fichierExtrait = os.path.join(repSortie,sat+"_"+date,nomExtrait) # nom + chemin de l'image
        sortieTif = gdal.Warp(fichierExtrait,
                            f"/vsizip/{repCourant}/{img}", # vsizip + chemin du zip + chemin de l'image dans le zip
                            creationOptions=['COMPRESS=LZW', 'PREDICTOR=2'], # compression du tif
                            cutlineDSName=emprise, # decoupage en fonction d'un contour
                            dstNodata=-10000, # valeur de nodata -10000
                            xRes=10, yRes=-10, # resolution de sortie
                            targetAlignedPixels=True, # on garde le même emplacement des pixels que l'image de depart
                            cropToCutline=True) # on reduit l'image à l"emprise du contour
                             
                                 
        if not sortieTif:
            print(f"Erreur : {fichierExtrait}")
            sortieTif = None
    

    for img in masque:
           
        masque_parts = img.split("_")
        masque_name = masque_parts[11]+"_"+masque_parts[12].split(".")[0]
        nomExtrait = f"{rep}_{masque_name}"
        fichierExtrait = os.path.join(repSortie,sat+"_"+date, nomExtrait) # nom + chemin de l'image
        sortieTif = gdal.Warp(fichierExtrait,
                            f"/vsizip/{repCourant}/{img}", # vsizip + chemin du zip + chemin de l'image dans le zip
                            creationOptions=['COMPRESS=LZW', 'PREDICTOR=2'], # compression du tif
                            cutlineDSName=emprise, # decoupage en fonction d'un contour
                            dstNodata=-10000, # valeur de nodata
                            xRes=10, yRes=-10, # resolution de sortie
                            targetAlignedPixels=True, # on garde le même emplacement des pixels que l'image de depart
                            cropToCutline=True # on reduit l'image à l"emprise du contour
                            )
    if not sortieTif:
        print(f"Erreur : {fichierExtrait}")
        sortieTif = None
        

####################
####################
### Tuile 31TGL ####
####################
####################

repDonnees = "archive_zip/T31TGL" #repertoire qui contient les dossiers .zip Sentinel2
repSortie = "sortie/sortieT31TGL" #repertoire pour la sortie des fichiers
emprise = "emprise/emp31TGL.gpkg"
listeRep = os.listdir(repDonnees)

#boucle de l'extraction des emprises pour toutes les dates de la tuile
for i in range(len(listeRep)):
    
    #definir le sous-repertoire en cours
    repCourant = os.path.join(repDonnees, listeRep[i])
    
    #accès aux fichiers du sous-repertoire
    repDonneesSousRep = ZipFile(repCourant, 'r')
    pprint(repDonneesSousRep.filelist)
    
    #creation d'une liste de ces fichiers
    repDonneesFichiers = repDonneesSousRep.namelist()

# # Selection des images à traiter

    # Selection des images à garder
    images = [f for f in repDonneesFichiers if 'FRE' in f]
    #masqueSnow = [f for f in repDonneesFichiers if ('EXS'in f or 'SNW' in f) and '.tif' in f]
    masque = [f for f in repDonneesFichiers if 'CLM' in f and 'R1' in f ]
    
# # Dossier et fichiers de sortie
 
    #definir le nom des repertoires en sortie
    nomParties = os.path.basename(repCourant).split("_")
    sat = nomParties[0].replace("SENTINEL", "S")
    date = nomParties[1].split("-")[0]
    
    
    rep = f"{sat}_{date}_{nomParties[3]}"
   
    os.makedirs(os.path.join(repSortie,sat+"_"+date), exist_ok=True) # creation du dossier sur le disque


# # Traitement de l'image compressee
# gdal lit directement des donnees dans des archives.  
# Pour des repDonneess au format zip on utilise le protocol vsizip.  
# Pour lire des donnees on donne le chemin de l'repDonnees (comme si c'etait un dossier) puis le chemin de l'image dans l'repDonnees.
  
    for img in images:
               
        imageParties = img.split("_")
        bande = imageParties[12].split(".")[0]
        nomExtrait = f"{rep}_{bande}"
        fichierExtrait = os.path.join(repSortie,sat+"_"+date,nomExtrait) # nom + chemin de l'image
        sortieTif = gdal.Warp(fichierExtrait,
                            f"/vsizip/{repCourant}/{img}", # vsizip + chemin du zip + chemin de l'image dans le zip
                            creationOptions=['COMPRESS=LZW', 'PREDICTOR=2'], # compression du tif
                            cutlineDSName=emprise, # decoupage en fonction d'un contour
                            dstNodata=-10000, # valeur de nodata -10000
                            xRes=10, yRes=-10, # resolution de sortie
                            targetAlignedPixels=True, # on garde le même emplacement des pixels que l'image de depart
                            cropToCutline=True) # on reduit l'image à l"emprise du contour
                             
                                 
        if not sortieTif:
            print(f"Erreur : {fichierExtrait}")
            sortieTif = None
    

    for img in masque:
           
        masque_parts = img.split("_")
        masque_name = masque_parts[11]+"_"+masque_parts[12].split(".")[0]
        nomExtrait = f"{rep}_{masque_name}"
        fichierExtrait = os.path.join(repSortie,sat+"_"+date, nomExtrait) # nom + chemin de l'image
        sortieTif = gdal.Warp(fichierExtrait,
                            f"/vsizip/{repCourant}/{img}", # vsizip + chemin du zip + chemin de l'image dans le zip
                            creationOptions=['COMPRESS=LZW', 'PREDICTOR=2'], # compression du tif
                            cutlineDSName=emprise, # decoupage en fonction d'un contour
                            dstNodata=-10000, # valeur de nodata
                            xRes=10, yRes=-10, # resolution de sortie
                            targetAlignedPixels=True, # on garde le même emplacement des pixels que l'image de depart
                            cropToCutline=True # on reduit l'image à l"emprise du contour
                            )
    if not sortieTif:
        print(f"Erreur : {fichierExtrait}")
        sortieTif = None

####################
####################
### Tuile 32TLP ####
####################
####################

repDonnees = "archive_zip/T32TLP" #repertoire qui contient les dossiers .zip Sentinel2
repSortie = "sortie/sortieT32TLP" #repertoire pour la sortie des fichiers
emprise = "emprise/emp32TLP.gpkg"
listeRep = os.listdir(repDonnees)

#boucle de l'extraction des emprises pour toutes les dates de la tuile
for i in range(len(listeRep)):
    
    #definir le sous-repertoire en cours
    repCourant = os.path.join(repDonnees, listeRep[i])
    
    #accès aux fichiers du sous-repertoire
    repDonneesSousRep = ZipFile(repCourant, 'r')
    pprint(repDonneesSousRep.filelist)
    
    #creation d'une liste de ces fichiers
    repDonneesFichiers = repDonneesSousRep.namelist()

# # Selection des images à traiter

    # Selection des images à garder
    images = [f for f in repDonneesFichiers if 'FRE' in f]
    #masqueSnow = [f for f in repDonneesFichiers if ('EXS'in f or 'SNW' in f) and '.tif' in f]
    masque = [f for f in repDonneesFichiers if 'CLM' in f and 'R1' in f ]
    
# # Dossier et fichiers de sortie
 
    #definir le nom des repertoires en sortie
    nomParties = os.path.basename(repCourant).split("_")
    sat = nomParties[0].replace("SENTINEL", "S")
    date = nomParties[1].split("-")[0]
    
    
    rep = f"{sat}_{date}_{nomParties[3]}"
   
    os.makedirs(os.path.join(repSortie,sat+"_"+date), exist_ok=True) # creation du dossier sur le disque


# # Traitement de l'image compressee
# gdal lit directement des donnees dans des archives.  
# Pour des repDonneess au format zip on utilise le protocol vsizip.  
# Pour lire des donnees on donne le chemin de l'repDonnees (comme si c'etait un dossier) puis le chemin de l'image dans l'repDonnees.
  
    for img in images:
               
        imageParties = img.split("_")
        bande = imageParties[12].split(".")[0]
        nomExtrait = f"{rep}_{bande}"
        fichierExtrait = os.path.join(repSortie,sat+"_"+date,nomExtrait) # nom + chemin de l'image
        sortieTif = gdal.Warp(fichierExtrait,
                            f"/vsizip/{repCourant}/{img}", # vsizip + chemin du zip + chemin de l'image dans le zip
                            creationOptions=['COMPRESS=LZW', 'PREDICTOR=2'], # compression du tif
                            cutlineDSName=emprise, # decoupage en fonction d'un contour
                            dstNodata=-10000, # valeur de nodata -10000
                            xRes=10, yRes=-10, # resolution de sortie
                            targetAlignedPixels=True, # on garde le même emplacement des pixels que l'image de depart
                            cropToCutline=True) # on reduit l'image à l"emprise du contour
                             
                                 
        if not sortieTif:
            print(f"Erreur : {fichierExtrait}")
            sortieTif = None
    

    for img in masque:
           
        masque_parts = img.split("_")
        masque_name = masque_parts[11]+"_"+masque_parts[12].split(".")[0]
        nomExtrait = f"{rep}_{masque_name}"
        fichierExtrait = os.path.join(repSortie,sat+"_"+date, nomExtrait) # nom + chemin de l'image
        sortieTif = gdal.Warp(fichierExtrait,
                            f"/vsizip/{repCourant}/{img}", # vsizip + chemin du zip + chemin de l'image dans le zip
                            creationOptions=['COMPRESS=LZW', 'PREDICTOR=2'], # compression du tif
                            cutlineDSName=emprise, # decoupage en fonction d'un contour
                            dstNodata=-10000, # valeur de nodata
                            xRes=10, yRes=-10, # resolution de sortie
                            targetAlignedPixels=True, # on garde le même emplacement des pixels que l'image de depart
                            cropToCutline=True # on reduit l'image à l"emprise du contour
                            )
    if not sortieTif:
        print(f"Erreur : {fichierExtrait}")
        sortieTif = None
        
        
####################
####################
### Tuile 32TLQ ####
####################
####################

repDonnees = "archive_zip/T32TLQ" #repertoire qui contient les dossiers .zip Sentinel2
repSortie = "sortie/sortieT32TLQ" #repertoire pour la sortie des fichiers
emprise = "emprise/emp32TLQ.gpkg"
listeRep = os.listdir(repDonnees)

#boucle de l'extraction des emprises pour toutes les dates de la tuile
for i in range(len(listeRep)):
    
    #definir le sous-repertoire en cours
    repCourant = os.path.join(repDonnees, listeRep[i])
    
    #accès aux fichiers du sous-repertoire
    repDonneesSousRep = ZipFile(repCourant, 'r')
    pprint(repDonneesSousRep.filelist)
    
    #creation d'une liste de ces fichiers
    repDonneesFichiers = repDonneesSousRep.namelist()

# # Selection des images à traiter

    # Selection des images à garder
    images = [f for f in repDonneesFichiers if 'FRE' in f]
    #masqueSnow = [f for f in repDonneesFichiers if ('EXS'in f or 'SNW' in f) and '.tif' in f]
    masque = [f for f in repDonneesFichiers if 'CLM' in f and 'R1' in f ]
    
# # Dossier et fichiers de sortie
 
    #definir le nom des repertoires en sortie
    nomParties = os.path.basename(repCourant).split("_")
    sat = nomParties[0].replace("SENTINEL", "S")
    date = nomParties[1].split("-")[0]
    
    
    rep = f"{sat}_{date}_{nomParties[3]}"
   
    os.makedirs(os.path.join(repSortie,sat+"_"+date), exist_ok=True) # creation du dossier sur le disque


# # Traitement de l'image compressee
# gdal lit directement des donnees dans des archives.  
# Pour des repDonneess au format zip on utilise le protocol vsizip.  
# Pour lire des donnees on donne le chemin de l'repDonnees (comme si c'etait un dossier) puis le chemin de l'image dans l'repDonnees.
  
    for img in images:
               
        imageParties = img.split("_")
        bande = imageParties[12].split(".")[0]
        nomExtrait = f"{rep}_{bande}"
        fichierExtrait = os.path.join(repSortie,sat+"_"+date,nomExtrait) # nom + chemin de l'image
        sortieTif = gdal.Warp(fichierExtrait,
                            f"/vsizip/{repCourant}/{img}", # vsizip + chemin du zip + chemin de l'image dans le zip
                            creationOptions=['COMPRESS=LZW', 'PREDICTOR=2'], # compression du tif
                            cutlineDSName=emprise, # decoupage en fonction d'un contour
                            dstNodata=-10000, # valeur de nodata -10000
                            xRes=10, yRes=-10, # resolution de sortie
                            targetAlignedPixels=True, # on garde le même emplacement des pixels que l'image de depart
                            cropToCutline=True) # on reduit l'image à l"emprise du contour
                             
                                 
        if not sortieTif:
            print(f"Erreur : {fichierExtrait}")
            sortieTif = None
    

    for img in masque:
           
        masque_parts = img.split("_")
        masque_name = masque_parts[11]+"_"+masque_parts[12].split(".")[0]
        nomExtrait = f"{rep}_{masque_name}"
        fichierExtrait = os.path.join(repSortie,sat+"_"+date, nomExtrait) # nom + chemin de l'image
        sortieTif = gdal.Warp(fichierExtrait,
                            f"/vsizip/{repCourant}/{img}", # vsizip + chemin du zip + chemin de l'image dans le zip
                            creationOptions=['COMPRESS=LZW', 'PREDICTOR=2'], # compression du tif
                            cutlineDSName=emprise, # decoupage en fonction d'un contour
                            dstNodata=-10000, # valeur de nodata
                            xRes=10, yRes=-10, # resolution de sortie
                            targetAlignedPixels=True, # on garde le même emplacement des pixels que l'image de depart
                            cropToCutline=True # on reduit l'image à l"emprise du contour
                            )
    if not sortieTif:
        print(f"Erreur : {fichierExtrait}")
        sortieTif = None
        
####################
####################
### Tuile 32TLR ####
####################
####################

repDonnees = "archive_zip/T32TLR" #repertoire qui contient les dossiers .zip Sentinel2
repSortie = "sortie/sortieT32TLR" #repertoire pour la sortie des fichiers
emprise = "emprise/emp32TLR.gpkg"
listeRep = os.listdir(repDonnees)

#boucle de l'extraction des emprises pour toutes les dates de la tuile
for i in range(len(listeRep)):
    
    #definir le sous-repertoire en cours
    repCourant = os.path.join(repDonnees, listeRep[i])
    
    #accès aux fichiers du sous-repertoire
    repDonneesSousRep = ZipFile(repCourant, 'r')
    pprint(repDonneesSousRep.filelist)
    
    #creation d'une liste de ces fichiers
    repDonneesFichiers = repDonneesSousRep.namelist()

# # Selection des images à traiter

    # Selection des images à garder
    images = [f for f in repDonneesFichiers if 'FRE' in f]
    #masqueSnow = [f for f in repDonneesFichiers if ('EXS'in f or 'SNW' in f) and '.tif' in f]
    masque = [f for f in repDonneesFichiers if 'CLM' in f and 'R1' in f ]
    
# # Dossier et fichiers de sortie
 
    #definir le nom des repertoires en sortie
    nomParties = os.path.basename(repCourant).split("_")
    sat = nomParties[0].replace("SENTINEL", "S")
    date = nomParties[1].split("-")[0]
    
    
    rep = f"{sat}_{date}_{nomParties[3]}"
   
    os.makedirs(os.path.join(repSortie,sat+"_"+date), exist_ok=True) # creation du dossier sur le disque


# # Traitement de l'image compressee
# gdal lit directement des donnees dans des archives.  
# Pour des repDonneess au format zip on utilise le protocol vsizip.  
# Pour lire des donnees on donne le chemin de l'repDonnees (comme si c'etait un dossier) puis le chemin de l'image dans l'repDonnees.
  
    for img in images:
               
        imageParties = img.split("_")
        bande = imageParties[12].split(".")[0]
        nomExtrait = f"{rep}_{bande}"
        fichierExtrait = os.path.join(repSortie,sat+"_"+date,nomExtrait) # nom + chemin de l'image
        sortieTif = gdal.Warp(fichierExtrait,
                            f"/vsizip/{repCourant}/{img}", # vsizip + chemin du zip + chemin de l'image dans le zip
                            creationOptions=['COMPRESS=LZW', 'PREDICTOR=2'], # compression du tif
                            cutlineDSName=emprise, # decoupage en fonction d'un contour
                            dstNodata=-10000, # valeur de nodata -10000
                            xRes=10, yRes=-10, # resolution de sortie
                            targetAlignedPixels=True, # on garde le même emplacement des pixels que l'image de depart
                            cropToCutline=True) # on reduit l'image à l"emprise du contour
                             
                                 
        if not sortieTif:
            print(f"Erreur : {fichierExtrait}")
            sortieTif = None
    

    for img in masque:
           
        masque_parts = img.split("_")
        masque_name = masque_parts[11]+"_"+masque_parts[12].split(".")[0]
        nomExtrait = f"{rep}_{masque_name}"
        fichierExtrait = os.path.join(repSortie,sat+"_"+date, nomExtrait) # nom + chemin de l'image
        sortieTif = gdal.Warp(fichierExtrait,
                            f"/vsizip/{repCourant}/{img}", # vsizip + chemin du zip + chemin de l'image dans le zip
                            creationOptions=['COMPRESS=LZW', 'PREDICTOR=2'], # compression du tif
                            cutlineDSName=emprise, # decoupage en fonction d'un contour
                            dstNodata=-10000, # valeur de nodata
                            xRes=10, yRes=-10, # resolution de sortie
                            targetAlignedPixels=True, # on garde le même emplacement des pixels que l'image de depart
                            cropToCutline=True # on reduit l'image à l"emprise du contour
                            )
    if not sortieTif:
        print(f"Erreur : {fichierExtrait}")
        sortieTif = None
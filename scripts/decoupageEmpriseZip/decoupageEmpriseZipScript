#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Apr 23 15:36:50 2021

@author: Emilie Sirot d'après le script de Pascal Pichelin
"""

#packages à importer

import os
from pprint import pprint
from zipfile import ZipFile
from osgeo import gdal


# # Données

# In[ ]:

#définition des répertoires

repZip = "archive" #répertoire qui contient les dossiers .zip Sentinel
repEmprise = "emprise" #répertoire qui contient les emprises 
repSortie = "sortie" #répertoire pour la sortie des fichiers 
#s2_zip = os.path.join(repZip, "SENTINEL2A_20170702-104252-984_L2B-SNOW_T31TFJ_D.zip")

#définition des emprises
emp31TFJ = "emprise/emp31TFJ.gpkg"
emp31TFK = "emprise/emp31TFK.gpkg"
emp31TGK = "emprise/emp31TGK.gpkg"
emp31TGL = "emprise/emp31TGL.gpkg"
emp32TLP = "emprise/emp32TLP.gpkg"
emp32TLQ = "emprise/emp32TLQ.gpkg"
emp32TLR = "emprise/emp32TLR.gpkg"

#liste des dossiers des tuiles
repTuiles = os.listdir("archive")

#liste de tous les dossiers .zip de chaque tuile 
rep31TFJ = os.listdir("archive/31TFJ")
rep31TFK = os.listdir("archive/31TFK")
rep31TGK = os.listdir("archive/31TGK")
rep31TGL = os.listdir("archive/31TGL")
rep32TLP = os.listdir("archive/32TLP")
rep32TLQ = os.listdir("archive/32TLQ")
rep32TLR = os.listdir("archive/32TLR")

####################
####################
### Tuile 31TFJ ####
####################
####################

# # Informations détaillées du contenu de l'archive

#boucle de l'extraction des emprises pour toutes les dates de la tuile
for i in range(len(rep31TFJ)):
    
    #definir le sous-répertoire en cours
    dossierZip = os.path.join(repZip, "31TFJ/"+rep31TFJ[i])
    
    #accès aux fichiers du sous-répertoire
    rep31TFJSousRep = ZipFile("archive/31TFJ/"+rep31TFJ[i], 'r')
    pprint(rep31TFJSousRep.filelist)
    
    #création d'une liste de ces fichiers
    rep31TFJFiles = rep31TFJSousRep.namelist()

# # Séléction des images à traiter

    # Sélection des images à garder
    image = [f for f in rep31TFJFiles if 'CMP' in f]
    #maskSnow = [f for f in rep31TFJFiles if ('EXS'in f or 'SNW' in f) and '.tif' in f]
    maskSnow = [f for f in rep31TFJFiles if 'SNW' in f and '.tif' in f]
    maskSnow2 = [f for f in rep31TFJFiles if 'EXS'in f and '.tif' in f]
 
# # Dossier de sortie
 
    name_parts = os.path.basename("archive/31TFJ/"+rep31TFJ[i]).split("_")
    sat = name_parts[0].replace("SENTINEL", "S")
    date = name_parts[1].split("-")[0]
    
    rep = f"{sat}_{date}_{name_parts[3]}"
    rep_out_extrait = os.path.join(repSortie, rep)
    os.makedirs(rep_out_extrait, exist_ok=True) # création du dossier sur le disque


# # Traitement de l'image compressée
# gdal lit directement des données dans des archives.  
# Pour des repZips au format zip on utilise le protocol vsizip.  
# Pour lire des données on donne le chemin de l'repZip (comme si c'était un dossier) puis le chemin de l'image dans l'repZip.

    for img in image:
        #band_num = os.path.basename(img).split("_")[-1]
        name_extrait = f"{rep}_image"
        file_extrait = os.path.join(rep_out_extrait, name_extrait) # nom + chemin de l'image
        out_tif = gdal.Warp(file_extrait,
                            f"/vsizip/{dossierZip}/{img}", # vsizip + chemin du zip + chemin de l'image dans le zip
                            creationOptions=['COMPRESS=LZW', 'PREDICTOR=2'], # compression du tif
                            cutlineDSName=emp31TFJ, # découpage en fonction d'un contour
                            dstNodata=-9999.0, # valeur de nodata -10000
                            xRes=10, yRes=-10, # résolution de sortie
                            targetAlignedPixels=True, # on garde le même emplacement des pixels que l'image de départ
                            cropToCutline=True # on réduit l'image à l"emprise du contour
                           )
    if not out_tif:
        print(f"Erreur : {file_extrait}")
    out_tif = None


    for img in maskSnow:
        #band_num = os.path.basename(img).split("_")[-1]
        name_extrait = f"{rep}_mask"
        file_extrait = os.path.join(rep_out_extrait, name_extrait) # nom + chemin de l'image
        out_tif = gdal.Warp(file_extrait,
                            f"/vsizip/{dossierZip}/{img}", # vsizip + chemin du zip + chemin de l'image dans le zip
                            creationOptions=['COMPRESS=LZW', 'PREDICTOR=2'], # compression du tif
                            cutlineDSName=emp31TFJ, # découpage en fonction d'un contour
                            dstNodata=-10000, # valeur de nodata
                            xRes=10, yRes=-10, # résolution de sortie
                            targetAlignedPixels=True, # on garde le même emplacement des pixels que l'image de départ
                            cropToCutline=True # on réduit l'image à l"emprise du contour
                           )
    if not out_tif:
        print(f"Erreur : {file_extrait}")
    out_tif = None


    for img in maskSnow2:
        #band_num = os.path.basename(img).split("_")[-1]
        name_extrait = f"{rep}_mask2"
        file_extrait = os.path.join(rep_out_extrait, name_extrait) # nom + chemin de l'image
        out_tif = gdal.Warp(file_extrait,
                            f"/vsizip/{dossierZip}/{img}", # vsizip + chemin du zip + chemin de l'image dans le zip
                            creationOptions=['COMPRESS=LZW', 'PREDICTOR=2'], # compression du tif
                            cutlineDSName=emp31TFJ, # découpage en fonction d'un contour
                            dstNodata=-10000, # valeur de nodata
                            xRes=10, yRes=-10, # résolution de sortie
                            targetAlignedPixels=True, # on garde le même emplacement des pixels que l'image de départ
                            cropToCutline=True # on réduit l'image à l"emprise du contour
                           )
    if not out_tif:
        print(f"Erreur : {file_extrait}")
    out_tif = None


####################
####################
### Tuile 31TFK ####
####################
####################

# # Informations détaillées du contenu de l'archive

#boucle de l'extraction des emprises pour toutes les dates de la tuile
for i in range(len(rep31TFK)):
    
    #definir le sous-répertoire en cours
    dossierZip = os.path.join(repZip, "31TFK/"+rep31TFK[i])
    
    #accès aux fichiers du sous-répertoire
    rep31TFKSousRep = ZipFile("archive/31TFK/"+rep31TFK[i], 'r')
    pprint(rep31TFKSousRep.filelist)
    
    #création d'une liste de ces fichiers
    rep31TFKFiles = rep31TFKSousRep.namelist()

# # Séléction des images à traiter

    # Sélection des images à garder
    image = [f for f in rep31TFKFiles if 'CMP' in f]
    #maskSnow = [f for f in rep31TFJFiles if ('EXS'in f or 'SNW' in f) and '.tif' in f]
    maskSnow = [f for f in rep31TFKFiles if 'SNW' in f and '.tif' in f]
    maskSnow2 = [f for f in rep31TFKFiles if 'EXS'in f and '.tif' in f]
 
# # Dossier de sortie
 
    name_parts = os.path.basename("archive/31TFK/"+rep31TFK[i]).split("_")
    sat = name_parts[0].replace("SENTINEL", "S")
    date = name_parts[1].split("-")[0]
    
    rep = f"{sat}_{date}_{name_parts[3]}"
    rep_out_extrait = os.path.join(repSortie, rep)
    os.makedirs(rep_out_extrait, exist_ok=True) # création du dossier sur le disque


# # Traitement de l'image compressée
# gdal lit directement des données dans des archives.  
# Pour des repZips au format zip on utilise le protocol vsizip.  
# Pour lire des données on donne le chemin de l'repZip (comme si c'était un dossier) puis le chemin de l'image dans l'repZip.

    for img in image:
        #band_num = os.path.basename(img).split("_")[-1]
        name_extrait = f"{rep}_image"
        file_extrait = os.path.join(rep_out_extrait, name_extrait) # nom + chemin de l'image
        out_tif = gdal.Warp(file_extrait,
                            f"/vsizip/{dossierZip}/{img}", # vsizip + chemin du zip + chemin de l'image dans le zip
                            creationOptions=['COMPRESS=LZW', 'PREDICTOR=2'], # compression du tif
                            cutlineDSName=emp31TFK, # découpage en fonction d'un contour
                            dstNodata=-9999.0, # valeur de nodata -10000
                            xRes=10, yRes=-10, # résolution de sortie
                            targetAlignedPixels=True, # on garde le même emplacement des pixels que l'image de départ
                            cropToCutline=True # on réduit l'image à l"emprise du contour
                           )
    if not out_tif:
        print(f"Erreur : {file_extrait}")
    out_tif = None


    for img in maskSnow:
        #band_num = os.path.basename(img).split("_")[-1]
        name_extrait = f"{rep}_mask"
        file_extrait = os.path.join(rep_out_extrait, name_extrait) # nom + chemin de l'image
        out_tif = gdal.Warp(file_extrait,
                            f"/vsizip/{dossierZip}/{img}", # vsizip + chemin du zip + chemin de l'image dans le zip
                            creationOptions=['COMPRESS=LZW', 'PREDICTOR=2'], # compression du tif
                            cutlineDSName=emp31TFK, # découpage en fonction d'un contour
                            dstNodata=-10000, # valeur de nodata
                            xRes=10, yRes=-10, # résolution de sortie
                            targetAlignedPixels=True, # on garde le même emplacement des pixels que l'image de départ
                            cropToCutline=True # on réduit l'image à l"emprise du contour
                           )
    if not out_tif:
        print(f"Erreur : {file_extrait}")
    out_tif = None


    for img in maskSnow2:
        #band_num = os.path.basename(img).split("_")[-1]
        name_extrait = f"{rep}_mask2"
        file_extrait = os.path.join(rep_out_extrait, name_extrait) # nom + chemin de l'image
        out_tif = gdal.Warp(file_extrait,
                            f"/vsizip/{dossierZip}/{img}", # vsizip + chemin du zip + chemin de l'image dans le zip
                            creationOptions=['COMPRESS=LZW', 'PREDICTOR=2'], # compression du tif
                            cutlineDSName=emp31TFK, # découpage en fonction d'un contour
                            dstNodata=-10000, # valeur de nodata
                            xRes=10, yRes=-10, # résolution de sortie
                            targetAlignedPixels=True, # on garde le même emplacement des pixels que l'image de départ
                            cropToCutline=True # on réduit l'image à l"emprise du contour
                           )
    if not out_tif:
        print(f"Erreur : {file_extrait}")
    out_tif = None

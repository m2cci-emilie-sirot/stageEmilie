#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Aug 12 17:12:53 2021

@author: Emilie SIROT
"""

import os
from osgeo import gdal
import itertools
import rasterio
import numpy as np 
import geopandas as gpd
import pandas as pd


####################
####################
### Tuile 31TFJ ####
####################
####################
 
 
repDonnees = r"../applicationMasque/sortie/sortieT31TFJ"
repSortie = "sortie/sortieT31TFJ"


listeRep = os.listdir(repDonnees)


#ouvrir les TFE

TFEChemin = "TFE/tfe_bio_T31TFJ_WGS84.shp"    
TFE = gpd.read_file(TFEChemin) #ouverture du shp
   

listeCoordonnees = []
     
for j in range(len(TFE)):
    x = TFE.iloc[j].geometry.centroid.x #récupère les coordonnées d'un point
    y = TFE.iloc[j].geometry.centroid.y
     
    listeCoordonnees.append((x,y))    


legende = ["dates"]

for leg in range(len(TFE)):
    legende.append(TFE["Id_sitesAS"][leg])


tabCalcul = pd.DataFrame(columns = legende)


index = 0

for i in range (len(listeRep)):
    repCourant = os.path.join(repDonnees, listeRep[i])#se positionner dans le répertoire d'une date
    
    nomParties = os.path.basename(listeRep[i]).split("_")
  
    tuile = nomParties[2]
    date = nomParties[1]
    date = int(date)
    
    nomSortieTab = f"tableau_pourcentage_dates_exploitables_{tuile}.csv"
    
    
    masque = os.path.join(repCourant,"masqueConverti.tiff")
    imageRef = gdal.Open(masque)
    masqueArray = imageRef.ReadAsArray()

    
    cols = imageRef.RasterXSize
    rows = imageRef.RasterYSize
    transform = imageRef.GetGeoTransform()
    xOrigin = transform[0]
    yOrigin = transform[3]
    pixelWidth = transform[1]
    pixelHeight = -transform[5]
    
   
    
    val = []
    
    for point in listeCoordonnees:
        col = int((point[0] - xOrigin) / pixelWidth)
        row = int((yOrigin - point[1] ) / pixelHeight)
    
        
        val.append(masqueArray[row][col])
        
    
           
            
    val.insert(0,date)
        
    tabCalcul.loc[index]=val
    
    index = index + 1
    


listePourcentage = []

for colTab in range(1,len(tabCalcul.columns)):
    colListe = tabCalcul.iloc[:,colTab].tolist()
    lg = len(colListe)    
    nb = colListe.count(1)
    pourcentage = (nb*100)/lg
    listePourcentage.append(pourcentage)


legende2 = []
for leg in range(len(TFE)):
    legende2.append(TFE["Id_sitesAS"][leg])

tabPourcentage = pd.DataFrame(columns = legende2)

tabPourcentage.loc[0] = listePourcentage
tabPourcentage.to_csv(os.path.join(repSortie,nomSortieTab), index=False)

####################
####################
### Tuile 31TFK ####
####################
####################
 
 
repDonnees = r"../applicationMasque/sortie/sortieT31TFK"
repSortie = "sortie/sortieT31TFK"


listeRep = os.listdir(repDonnees)


#ouvrir les TFE

TFEChemin = "TFE/tfe_bio_T31TFK_WGS84.shp"    
TFE = gpd.read_file(TFEChemin) #ouverture du shp
   

listeCoordonnees = []
     
for j in range(len(TFE)):
    x = TFE.iloc[j].geometry.centroid.x #récupère les coordonnées d'un point
    y = TFE.iloc[j].geometry.centroid.y
     
    listeCoordonnees.append((x,y))    


legende = ["dates"]

for leg in range(len(TFE)):
    legende.append(TFE["Id_sitesAS"][leg])


tabCalcul = pd.DataFrame(columns = legende)


index = 0

for i in range (len(listeRep)):
    repCourant = os.path.join(repDonnees, listeRep[i])#se positionner dans le répertoire d'une date
    
    nomParties = os.path.basename(listeRep[i]).split("_")
  
    tuile = nomParties[2]
    date = nomParties[1]
    date = int(date)
    
    nomSortieTab = f"tableau_pourcentage_dates_exploitables_{tuile}.csv"
    
    
    masque = os.path.join(repCourant,"masqueConverti.tiff")
    imageRef = gdal.Open(masque)
    masqueArray = imageRef.ReadAsArray()

    
    cols = imageRef.RasterXSize
    rows = imageRef.RasterYSize
    transform = imageRef.GetGeoTransform()
    xOrigin = transform[0]
    yOrigin = transform[3]
    pixelWidth = transform[1]
    pixelHeight = -transform[5]
    
   
    
    val = []
    
    for point in listeCoordonnees:
        col = int((point[0] - xOrigin) / pixelWidth)
        row = int((yOrigin - point[1] ) / pixelHeight)
    
        
        val.append(masqueArray[row][col])
        
    
           
            
    val.insert(0,date)
        
    tabCalcul.loc[index]=val
    
    index = index + 1
    


listePourcentage = []

for colTab in range(1,len(tabCalcul.columns)):
    colListe = tabCalcul.iloc[:,colTab].tolist()
    lg = len(colListe)    
    nb = colListe.count(1)
    pourcentage = (nb*100)/lg
    listePourcentage.append(pourcentage)


legende2 = []
for leg in range(len(TFE)):
    legende2.append(TFE["Id_sitesAS"][leg])

tabPourcentage = pd.DataFrame(columns = legende2)

tabPourcentage.loc[0] = listePourcentage
tabPourcentage.to_csv(os.path.join(repSortie,nomSortieTab), index=False)

####################
####################
### Tuile 31TGK ####
####################
####################
 
 
repDonnees = r"../applicationMasque/sortie/sortieT31TGK"
repSortie = "sortie/sortieT31TGK"


listeRep = os.listdir(repDonnees)


#ouvrir les TFE

TFEChemin = "TFE/tfe_bio_T31TGK_WGS84.shp"    
TFE = gpd.read_file(TFEChemin) #ouverture du shp
   

listeCoordonnees = []
     
for j in range(len(TFE)):
    x = TFE.iloc[j].geometry.centroid.x #récupère les coordonnées d'un point
    y = TFE.iloc[j].geometry.centroid.y
     
    listeCoordonnees.append((x,y))    


legende = ["dates"]

for leg in range(len(TFE)):
    legende.append(TFE["Id_sitesAS"][leg])


tabCalcul = pd.DataFrame(columns = legende)


index = 0

for i in range (len(listeRep)):
    repCourant = os.path.join(repDonnees, listeRep[i])#se positionner dans le répertoire d'une date
    
    nomParties = os.path.basename(listeRep[i]).split("_")
  
    tuile = nomParties[2]
    date = nomParties[1]
    date = int(date)
    
    nomSortieTab = f"tableau_pourcentage_dates_exploitables_{tuile}.csv"
    
    
    masque = os.path.join(repCourant,"masqueConverti.tiff")
    imageRef = gdal.Open(masque)
    masqueArray = imageRef.ReadAsArray()

    
    cols = imageRef.RasterXSize
    rows = imageRef.RasterYSize
    transform = imageRef.GetGeoTransform()
    xOrigin = transform[0]
    yOrigin = transform[3]
    pixelWidth = transform[1]
    pixelHeight = -transform[5]
    
   
    
    val = []
    
    for point in listeCoordonnees:
        col = int((point[0] - xOrigin) / pixelWidth)
        row = int((yOrigin - point[1] ) / pixelHeight)
    
        
        val.append(masqueArray[row][col])
        
    
           
            
    val.insert(0,date)
        
    tabCalcul.loc[index]=val
    
    index = index + 1
    


listePourcentage = []

for colTab in range(1,len(tabCalcul.columns)):
    colListe = tabCalcul.iloc[:,colTab].tolist()
    lg = len(colListe)    
    nb = colListe.count(1)
    pourcentage = (nb*100)/lg
    listePourcentage.append(pourcentage)


legende2 = []
for leg in range(len(TFE)):
    legende2.append(TFE["Id_sitesAS"][leg])

tabPourcentage = pd.DataFrame(columns = legende2)

tabPourcentage.loc[0] = listePourcentage
tabPourcentage.to_csv(os.path.join(repSortie,nomSortieTab), index=False)

####################
####################
### Tuile 31TGL ####
####################
####################
 
 
repDonnees = r"../applicationMasque/sortie/sortieT31TGL"
repSortie = "sortie/sortieT31TGL"


listeRep = os.listdir(repDonnees)


#ouvrir les TFE

TFEChemin = "TFE/tfe_bio_T31TGL_WGS84.shp"    
TFE = gpd.read_file(TFEChemin) #ouverture du shp
   

listeCoordonnees = []
     
for j in range(len(TFE)):
    x = TFE.iloc[j].geometry.centroid.x #récupère les coordonnées d'un point
    y = TFE.iloc[j].geometry.centroid.y
     
    listeCoordonnees.append((x,y))    


legende = ["dates"]

for leg in range(len(TFE)):
    legende.append(TFE["Id_sitesAS"][leg])


tabCalcul = pd.DataFrame(columns = legende)


index = 0

for i in range (len(listeRep)):
    repCourant = os.path.join(repDonnees, listeRep[i])#se positionner dans le répertoire d'une date
    
    nomParties = os.path.basename(listeRep[i]).split("_")
  
    tuile = nomParties[2]
    date = nomParties[1]
    date = int(date)
    
    nomSortieTab = f"tableau_pourcentage_dates_exploitables_{tuile}.csv"
    
    
    masque = os.path.join(repCourant,"masqueConverti.tiff")
    imageRef = gdal.Open(masque)
    masqueArray = imageRef.ReadAsArray()

    
    cols = imageRef.RasterXSize
    rows = imageRef.RasterYSize
    transform = imageRef.GetGeoTransform()
    xOrigin = transform[0]
    yOrigin = transform[3]
    pixelWidth = transform[1]
    pixelHeight = -transform[5]
    
   
    
    val = []
    
    for point in listeCoordonnees:
        col = int((point[0] - xOrigin) / pixelWidth)
        row = int((yOrigin - point[1] ) / pixelHeight)
    
        
        val.append(masqueArray[row][col])
        
    
           
            
    val.insert(0,date)
        
    tabCalcul.loc[index]=val
    
    index = index + 1
    


listePourcentage = []

for colTab in range(1,len(tabCalcul.columns)):
    colListe = tabCalcul.iloc[:,colTab].tolist()
    lg = len(colListe)    
    nb = colListe.count(1)
    pourcentage = (nb*100)/lg
    listePourcentage.append(pourcentage)


legende2 = []
for leg in range(len(TFE)):
    legende2.append(TFE["Id_sitesAS"][leg])

tabPourcentage = pd.DataFrame(columns = legende2)

tabPourcentage.loc[0] = listePourcentage
tabPourcentage.to_csv(os.path.join(repSortie,nomSortieTab), index=False)

####################
####################
### Tuile 32TLP ####
####################
####################
 
 
repDonnees = r"../applicationMasque/sortie/sortieT32TLP"
repSortie = "sortie/sortieT32TLP"


listeRep = os.listdir(repDonnees)


#ouvrir les TFE

TFEChemin = "TFE/tfe_bio_T32TLP_WGS84.shp"    
TFE = gpd.read_file(TFEChemin) #ouverture du shp
   

listeCoordonnees = []
     
for j in range(len(TFE)):
    x = TFE.iloc[j].geometry.centroid.x #récupère les coordonnées d'un point
    y = TFE.iloc[j].geometry.centroid.y
     
    listeCoordonnees.append((x,y))    


legende = ["dates"]

for leg in range(len(TFE)):
    legende.append(TFE["Id_sitesAS"][leg])


tabCalcul = pd.DataFrame(columns = legende)


index = 0

for i in range (len(listeRep)):
    repCourant = os.path.join(repDonnees, listeRep[i])#se positionner dans le répertoire d'une date
    
    nomParties = os.path.basename(listeRep[i]).split("_")
  
    tuile = nomParties[2]
    date = nomParties[1]
    date = int(date)
    
    nomSortieTab = f"tableau_pourcentage_dates_exploitables_{tuile}.csv"
    
    
    masque = os.path.join(repCourant,"masqueConverti.tiff")
    imageRef = gdal.Open(masque)
    masqueArray = imageRef.ReadAsArray()

    
    cols = imageRef.RasterXSize
    rows = imageRef.RasterYSize
    transform = imageRef.GetGeoTransform()
    xOrigin = transform[0]
    yOrigin = transform[3]
    pixelWidth = transform[1]
    pixelHeight = -transform[5]
    
   
    
    val = []
    
    for point in listeCoordonnees:
        col = int((point[0] - xOrigin) / pixelWidth)
        row = int((yOrigin - point[1] ) / pixelHeight)
    
        
        val.append(masqueArray[row][col])
        
    
           
            
    val.insert(0,date)
        
    tabCalcul.loc[index]=val
    
    index = index + 1
    


listePourcentage = []

for colTab in range(1,len(tabCalcul.columns)):
    colListe = tabCalcul.iloc[:,colTab].tolist()
    lg = len(colListe)    
    nb = colListe.count(1)
    pourcentage = (nb*100)/lg
    listePourcentage.append(pourcentage)


legende2 = []
for leg in range(len(TFE)):
    legende2.append(TFE["Id_sitesAS"][leg])

tabPourcentage = pd.DataFrame(columns = legende2)

tabPourcentage.loc[0] = listePourcentage
tabPourcentage.to_csv(os.path.join(repSortie,nomSortieTab), index=False)

####################
####################
### Tuile 32TLQ ####
####################
####################
 
 
repDonnees = r"../applicationMasque/sortie/sortieT32TLQ"
repSortie = "sortie/sortieT32TLQ"


listeRep = os.listdir(repDonnees)


#ouvrir les TFE

TFEChemin = "TFE/tfe_bio_T32TLQ_WGS84.shp"    
TFE = gpd.read_file(TFEChemin) #ouverture du shp
   

listeCoordonnees = []
     
for j in range(len(TFE)):
    x = TFE.iloc[j].geometry.centroid.x #récupère les coordonnées d'un point
    y = TFE.iloc[j].geometry.centroid.y
     
    listeCoordonnees.append((x,y))    


legende = ["dates"]

for leg in range(len(TFE)):
    legende.append(TFE["Id_sitesAS"][leg])


tabCalcul = pd.DataFrame(columns = legende)


index = 0

for i in range (len(listeRep)):
    repCourant = os.path.join(repDonnees, listeRep[i])#se positionner dans le répertoire d'une date
    
    nomParties = os.path.basename(listeRep[i]).split("_")
  
    tuile = nomParties[2]
    date = nomParties[1]
    date = int(date)
    
    nomSortieTab = f"tableau_pourcentage_dates_exploitables_{tuile}.csv"
    
    
    masque = os.path.join(repCourant,"masqueConverti.tiff")
    imageRef = gdal.Open(masque)
    masqueArray = imageRef.ReadAsArray()

    
    cols = imageRef.RasterXSize
    rows = imageRef.RasterYSize
    transform = imageRef.GetGeoTransform()
    xOrigin = transform[0]
    yOrigin = transform[3]
    pixelWidth = transform[1]
    pixelHeight = -transform[5]
    
   
    
    val = []
    
    for point in listeCoordonnees:
        col = int((point[0] - xOrigin) / pixelWidth)
        row = int((yOrigin - point[1] ) / pixelHeight)
    
        
        val.append(masqueArray[row][col])
        
    
           
            
    val.insert(0,date)
        
    tabCalcul.loc[index]=val
    
    index = index + 1
    


listePourcentage = []

for colTab in range(1,len(tabCalcul.columns)):
    colListe = tabCalcul.iloc[:,colTab].tolist()
    lg = len(colListe)    
    nb = colListe.count(1)
    pourcentage = (nb*100)/lg
    listePourcentage.append(pourcentage)


legende2 = []
for leg in range(len(TFE)):
    legende2.append(TFE["Id_sitesAS"][leg])

tabPourcentage = pd.DataFrame(columns = legende2)

tabPourcentage.loc[0] = listePourcentage
tabPourcentage.to_csv(os.path.join(repSortie,nomSortieTab), index=False)

####################
####################
### Tuile 32TLR ####
####################
####################
 
 
repDonnees = r"../applicationMasque/sortie/sortieT32TLR"
repSortie = "sortie/sortieT32TLR"


listeRep = os.listdir(repDonnees)


#ouvrir les TFE

TFEChemin = "TFE/tfe_bio_T32TLR_WGS84.shp"    
TFE = gpd.read_file(TFEChemin) #ouverture du shp
   

listeCoordonnees = []
     
for j in range(len(TFE)):
    x = TFE.iloc[j].geometry.centroid.x #récupère les coordonnées d'un point
    y = TFE.iloc[j].geometry.centroid.y
     
    listeCoordonnees.append((x,y))    


legende = ["dates"]

for leg in range(len(TFE)):
    legende.append(TFE["Id_sitesAS"][leg])


tabCalcul = pd.DataFrame(columns = legende)


index = 0

for i in range (len(listeRep)):
    repCourant = os.path.join(repDonnees, listeRep[i])#se positionner dans le répertoire d'une date
    
    nomParties = os.path.basename(listeRep[i]).split("_")
  
    tuile = nomParties[2]
    date = nomParties[1]
    date = int(date)
    
    nomSortieTab = f"tableau_pourcentage_dates_exploitables_{tuile}.csv"
    
    
    masque = os.path.join(repCourant,"masqueConverti.tiff")
    imageRef = gdal.Open(masque)
    masqueArray = imageRef.ReadAsArray()

    
    cols = imageRef.RasterXSize
    rows = imageRef.RasterYSize
    transform = imageRef.GetGeoTransform()
    xOrigin = transform[0]
    yOrigin = transform[3]
    pixelWidth = transform[1]
    pixelHeight = -transform[5]
    
   
    
    val = []
    
    for point in listeCoordonnees:
        col = int((point[0] - xOrigin) / pixelWidth)
        row = int((yOrigin - point[1] ) / pixelHeight)
    
        
        val.append(masqueArray[row][col])
        
    
           
            
    val.insert(0,date)
        
    tabCalcul.loc[index]=val
    
    index = index + 1
    


listePourcentage = []

for colTab in range(1,len(tabCalcul.columns)):
    colListe = tabCalcul.iloc[:,colTab].tolist()
    lg = len(colListe)    
    nb = colListe.count(1)
    pourcentage = (nb*100)/lg
    listePourcentage.append(pourcentage)


legende2 = []
for leg in range(len(TFE)):
    legende2.append(TFE["Id_sitesAS"][leg])

tabPourcentage = pd.DataFrame(columns = legende2)

tabPourcentage.loc[0] = listePourcentage
tabPourcentage.to_csv(os.path.join(repSortie,nomSortieTab), index=False)



